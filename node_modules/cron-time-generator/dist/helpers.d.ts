/**
 * Days dictionary.
 */
export declare const Days: {
    sun: number;
    mon: number;
    tue: number;
    wed: number;
    thu: number;
    fri: number;
    sat: number;
    sunday: number;
    monday: number;
    tuesday: number;
    wednesday: number;
    thursday: number;
    friday: number;
    saturday: number;
};
declare const _default: {
    /**
     * Put a character in a string using position.
     * @param {number} position
     * @param {*} char
     * @param {string} str
     */
    spliceIntoPosition(position: number, char: string, str?: string | undefined): string;
    /**
     * Get cron minute string.
     */
    minute(): string;
    /**
     * Get cron hour String.
     */
    hour(): string;
    /**
     * Get Cron day string, with an option of setting: `hoursOfTheDay and minutesOfTheHour`
     * @param hoursOfTheDay
     * @param minutesOfTheHour
     */
    day(hoursOfTheDay?: number | number[], minutesOfTheHour?: number | number[]): string;
    /**
     * Get the integer representation of day string.
     * @param {string|number} day
     * @return {number}
     * @example
     *  Helpers.dayToInt('sunday') // 0
     *  Helpers.dayToInt('monday') // 1
     */
    dayToInt(day: number | string): number;
    /**
     * Get the integer representation of multiple day strings.
     * @param days
     */
    daysToIntegers(days: string | number | Array<string | number>): number[];
    /**
     * Checks if startDay and endDay follows a calendar sequence.
     * else throws error.
     * @param startDay
     * @param endDay
     */
    validateStartToEndDay(startDay: number, endDay: number): void;
};
export default _default;
