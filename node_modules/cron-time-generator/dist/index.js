"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronTime = void 0;
const helpers_1 = __importStar(require("./helpers"));
const EveryTime_1 = __importDefault(require("./EveryTime"));
/**
 * Cron Time Class
 */
class CronTime {
    /**
     * Every nth Time
     * @return {EveryTime}
     * @param interval
     */
    static every(interval) {
        return new EveryTime_1.default(interval);
    }
    /**
     * Every Minute
     */
    static everyMinute() {
        return helpers_1.default.minute();
    }
    /**
     * Every Hour
     */
    static everyHour() {
        return helpers_1.default.hour();
    }
    /**
     * Every Hour At
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     * @returns {string}
     */
    static everyHourAt(minutesOfTheHour) {
        return `${minutesOfTheHour} * * * *`;
    }
    /**
     * Every Day
     */
    static everyDay() {
        return helpers_1.default.day();
    }
    /**
     * Every Day At
     * @param {number|number[]} hoursOfTheDay - Hours of the day
     * @param {number|number[]} minutesOfTheHour - Minutes of the Hour
     */
    static everyDayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return helpers_1.default.day(hoursOfTheDay, minutesOfTheHour);
    }
    /**
     * Every Sunday At
     * @param {number|number[]} hoursOfTheDay - Hours Of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     */
    static everySundayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${helpers_1.Days.sunday}`;
    }
    /**
     * Every Sunday
     */
    static everySunday() {
        return CronTime.everySundayAt(0);
    }
    /**
     * Every Monday At
     * @param {number|number[]} hoursOfTheDay - Hours Of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     */
    static everyMondayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${helpers_1.Days.monday}`;
    }
    /**
     * Every Monday
     */
    static everyMonday() {
        return CronTime.everyMondayAt(0);
    }
    /**
     * Every Tuesday At
     * @param {number|number[]} hoursOfTheDay - Hours Of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     */
    static everyTuesdayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${helpers_1.Days.tuesday}`;
    }
    /**
     * Every Tuesday
     */
    static everyTuesday() {
        return CronTime.everyTuesdayAt(0);
    }
    /**
     * Every Wednesday At
     * @param {number|number[]} hoursOfTheDay - Hours Of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     */
    static everyWednesdayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${helpers_1.Days.wednesday}`;
    }
    /**
     * Every Wednesday
     */
    static everyWednesday() {
        return CronTime.everyWednesdayAt(0);
    }
    /**
     * Every Thursday At
     * @param {number|number[]} hoursOfTheDay - Hours Of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     */
    static everyThursdayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${helpers_1.Days.thursday}`;
    }
    /**
     * Every Thursday
     */
    static everyThursday() {
        return CronTime.everyThursdayAt(0);
    }
    /**
     * Every Friday At
     * @param {number|number[]} hoursOfTheDay - Hours Of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     */
    static everyFridayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${helpers_1.Days.friday}`;
    }
    /**
     * Every Friday
     */
    static everyFriday() {
        return CronTime.everyFridayAt(0);
    }
    /**
     * Every Saturday At
     * @param {number|number[]} hoursOfTheDay - Hours Of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour.
     */
    static everySaturdayAt(hoursOfTheDay, minutesOfTheHour = 0) {
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${helpers_1.Days.saturday}`;
    }
    /**
     * Every Saturday
     */
    static everySaturday() {
        return CronTime.everySaturdayAt(0);
    }
    /**
     * On Specific Days
     * @param {(string|number)[]} days
     */
    static onSpecificDays(days) {
        if (!Array.isArray(days) || days.length === 0) {
            throw new Error("onSpecificDays expects days to be an array of days string.");
        }
        days = helpers_1.default.daysToIntegers(days);
        return `0 0 * * ${days}`;
    }
    /**
     * On Specific Days At
     * @param {(string|number)[]} days
     * @param {number|number[]} hoursOfTheDay - Hours of the Day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour
     */
    static onSpecificDaysAt(days, hoursOfTheDay, minutesOfTheHour = 0) {
        if (!Array.isArray(days) || days.length === 0) {
            throw new Error("onSpecificDaysAt expects days to be an array of days string.");
        }
        days = helpers_1.default.daysToIntegers(days);
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${days}`;
    }
    /**
     * Every Week
     */
    static everyWeek() {
        return CronTime.everyWeekAt(0);
    }
    /**
     * Every Week At
     * @param {number|number[]|string|string[]} daysOfTheWeek - Days of the week
     * @param {number|number[]} hoursOfTheDay - Hours of the day.
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour
     */
    static everyWeekAt(daysOfTheWeek, hoursOfTheDay = 0, minutesOfTheHour = 0) {
        const days = helpers_1.default.daysToIntegers(daysOfTheWeek);
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${days}`;
    }
    /**
     * Every WeekDay
     * @param {number|string} startDay - Starting day (Monday=1, Sunday=0)
     * @param {number|string} endDay - Starting day (Monday=1, Sunday=0)
     * @returns {string}
     *
     * @example
     * CronTime.everyWeekDay()
     *  // Monday to Friday
     * CronTime.everyWeekDay('sunday', 'thursday')
     *  // Sunday to Thursday
     */
    static everyWeekDay(startDay = "monday", endDay = "friday") {
        return this.everyWeekDayAt(0, 0, startDay, endDay);
    }
    /**
     * Every WeekDay At
     * @param {number|number[]} hoursOfTheDay - Hours of the day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour
     * @param {number|string} startDay - Starting day
     * @param {number|string} endDay - Ending day
     * @returns {string}
     */
    static everyWeekDayAt(hoursOfTheDay, minutesOfTheHour = 0, startDay = "monday", endDay = "friday") {
        startDay = helpers_1.default.dayToInt(startDay);
        endDay = helpers_1.default.dayToInt(endDay);
        helpers_1.default.validateStartToEndDay(startDay, endDay);
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${startDay}-${endDay}`;
    }
    /**
     * Every Weekend
     * @param {number|string} startDay - Starting day (Monday=1, Sunday=0)
     * @param {number|string} endDay - Starting day (Monday=1, Sunday=0)
     * @returns {string}
     *
     * @example
     * CronTime.everyWeekend()
     *  // Saturday and Sunday
     * CronTime.everyWeekend('friday', 'saturday')
     *  // Friday and Saturday
     */
    static everyWeekend(startDay = "saturday", endDay = "sunday") {
        return this.everyWeekendAt(0, 0, startDay, endDay);
    }
    /**
     * Every Weekend At
     * @param {number|number[]} hoursOfTheDay - Hours of the day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour
     * @param {number|string} startDay - Starting day
     * @param {number|string} endDay - Ending day
     * @returns {string}
     */
    static everyWeekendAt(hoursOfTheDay, minutesOfTheHour = 0, startDay = "saturday", endDay = "sunday") {
        const days = helpers_1.default.daysToIntegers([startDay, endDay]);
        return `${minutesOfTheHour} ${hoursOfTheDay} * * ${days}`;
    }
    /**
     * Every Month
     */
    static everyMonth() {
        return CronTime.everyMonthOn(1);
    }
    /**
     * Every Month on
     * @param {number|number[]} daysOfTheMonth - Days of the month
     * @param {number|number[]} hoursOfTheDay - Hours of the day
     * @param {number|number[]} minutesOfTheHour - Minutes of the hour
     */
    static everyMonthOn(daysOfTheMonth, hoursOfTheDay = 0, minutesOfTheHour = 0) {
        const days = helpers_1.default.daysToIntegers(daysOfTheMonth);
        return `${minutesOfTheHour} ${hoursOfTheDay} ${days} * *`;
    }
    /**
     * Every Year
     */
    static everyYear() {
        return CronTime.everyYearIn(1);
    }
    /**
     * Every Year In
     * @param {number|number[]} monthsOfTheYear  - Months of the year
     * @param daysOfTheMonth - Days of the month
     * @param hoursOfTheDay - Hours of the day
     * @param minutesOfTheHour - Minutes of the hour.
     */
    static everyYearIn(monthsOfTheYear, daysOfTheMonth = 1, hoursOfTheDay = 0, minutesOfTheHour = 0) {
        const days = helpers_1.default.daysToIntegers(daysOfTheMonth);
        return `${minutesOfTheHour} ${hoursOfTheDay} ${days} ${monthsOfTheYear} *`;
    }
    /**
     * Between Time Frames
     * @param {number} start - Start
     * @param {number} end - End
     */
    static between(start, end) {
        return new EveryTime_1.default([start, end], {
            between: true
        });
    }
}
exports.CronTime = CronTime;
exports.default = CronTime;
