"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test = require("japa");
const index_1 = __importDefault(require("./index"));
const cron_validator_1 = require("cron-validator");
const helpers_1 = __importDefault(require("./helpers"));
const HelpersTests = [
    {
        title: `spliceIntoPosition(0, "2")`,
        expects: "2 * * * *",
        test: () => helpers_1.default.spliceIntoPosition(0, "2")
    },
    {
        title: `spliceIntoPosition(4, "5")`,
        expects: "* * * * 5",
        test: () => helpers_1.default.spliceIntoPosition(4, "5")
    },
    {
        title: "minute()",
        expects: "* * * * *",
        test: () => helpers_1.default.minute()
    },
    {
        title: "hour()",
        expects: "0 * * * *",
        test: () => helpers_1.default.hour()
    },
    {
        title: "day(10, 30)",
        expects: "30 10 * * *",
        test: () => helpers_1.default.day(10, 30)
    },
    {
        title: `dayToInt(0) === dayToInt("sunday")`,
        expects: true,
        test: () => helpers_1.default.dayToInt(0) === helpers_1.default.dayToInt("sunday")
    },
    {
        title: `dayToInt(...) using all days`,
        expects: [0, 1, 2, 3, 4, 5, 6],
        test: () => ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"].map(helpers_1.default.dayToInt)
    },
    {
        title: `daysToIntegers(["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"])`,
        expects: [0, 1, 2, 3, 4, 5, 6],
        test: () => helpers_1.default.daysToIntegers([
            "sunday",
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday"
        ])
    }
];
const MethodsTests = [
    {
        title: "everyMinute()",
        expects: "* * * * *",
        test: () => index_1.default.everyMinute()
    },
    {
        title: "everyHour()",
        expects: "0 * * * *",
        test: () => index_1.default.everyHour()
    },
    {
        title: "everyHourAt(15)",
        expects: "15 * * * *",
        test: () => index_1.default.everyHourAt(15)
    },
    {
        title: "everyHourAt(10, 20, 30) - Multiple minutes of an hour",
        expects: "10,20,30 * * * *",
        test: () => index_1.default.everyHourAt([10, 20, 30])
    },
    {
        title: "everyDay()",
        expects: "0 0 * * *",
        test: () => index_1.default.everyDay()
    },
    {
        title: "everyDayAt(10, 30)",
        expects: "30 10 * * *",
        test: () => index_1.default.everyDayAt(10, 30)
    },
    {
        title: "everyDayAt([6, 9, 12], [10, 30]) - Multiple hours and minutes of a day",
        expects: "10,30 6,9,12 * * *",
        test: () => index_1.default.everyDayAt([6, 9, 12], [10, 30])
    },
    {
        title: "everySunday()",
        expects: "0 0 * * 0",
        test: () => index_1.default.everySunday()
    },
    {
        title: "everySundayAt(9, 30)",
        expects: "30 9 * * 0",
        test: () => index_1.default.everySundayAt(9, 30)
    },
    {
        title: "everySundayAt([9, 10, 11], [30, 45]) - Multiple hours and minutes of a day",
        expects: "30,45 9,10,11 * * 0",
        test: () => index_1.default.everySundayAt([9, 10, 11], [30, 45])
    },
    {
        title: "everyMonday()",
        expects: "0 0 * * 1",
        test: () => index_1.default.everyMonday()
    },
    {
        title: "everyMondayAt(9, 30)",
        expects: "30 9 * * 1",
        test: () => index_1.default.everyMondayAt(9, 30)
    },
    {
        title: "everyMondayAt([9, 10, 11], [30, 45]) - Multiple hours and minutes of a day",
        expects: "30,45 9,10,11 * * 1",
        test: () => index_1.default.everyMondayAt([9, 10, 11], [30, 45])
    },
    {
        title: "everyTuesday",
        expects: "0 0 * * 2",
        test: () => index_1.default.everyTuesday()
    },
    {
        title: "everyTuesdayAt(9, 30)",
        expects: "30 9 * * 2",
        test: () => index_1.default.everyTuesdayAt(9, 30)
    },
    {
        title: "everyTuesdayAt([9, 10, 11], [30, 45]) - Multiple hours and minutes of a day",
        expects: "30,45 9,10,11 * * 2",
        test: () => index_1.default.everyTuesdayAt([9, 10, 11], [30, 45])
    },
    {
        title: "everyWednesday",
        expects: "0 0 * * 3",
        test: () => index_1.default.everyWednesday()
    },
    {
        title: "everyWednesdayAt(9, 30)",
        expects: "30 9 * * 3",
        test: () => index_1.default.everyWednesdayAt(9, 30)
    },
    {
        title: "everyWednesdayAt([9, 10, 11], [30, 45]) - Multiple hours and minutes of a day",
        expects: "30,45 9,10,11 * * 3",
        test: () => index_1.default.everyWednesdayAt([9, 10, 11], [30, 45])
    },
    {
        title: "everyThursday",
        expects: "0 0 * * 4",
        test: () => index_1.default.everyThursday()
    },
    {
        title: "everyThursdayAt(9, 30)",
        expects: "30 9 * * 4",
        test: () => index_1.default.everyThursdayAt(9, 30)
    },
    {
        title: "everyThursdayAt([9, 10, 11], [30, 45]) - Multiple hours and minutes of a day",
        expects: "30,45 9,10,11 * * 4",
        test: () => index_1.default.everyThursdayAt([9, 10, 11], [30, 45])
    },
    {
        title: "everyFriday",
        expects: "0 0 * * 5",
        test: () => index_1.default.everyFriday()
    },
    {
        title: "everyFridayAt(9, 30)",
        expects: "30 9 * * 5",
        test: () => index_1.default.everyFridayAt(9, 30)
    },
    {
        title: "everyFridayAt([9, 10, 11], [30, 45]) - Multiple hours and minutes of a day",
        expects: "30,45 9,10,11 * * 5",
        test: () => index_1.default.everyFridayAt([9, 10, 11], [30, 45])
    },
    {
        title: "everySaturday",
        expects: "0 0 * * 6",
        test: () => index_1.default.everySaturday()
    },
    {
        title: "everySaturdayAt(9, 30)",
        expects: "30 9 * * 6",
        test: () => index_1.default.everySaturdayAt(9, 30)
    },
    {
        title: "everySaturdayAt([9, 10, 11], [30, 45]) - Multiple hours and minutes of a day",
        expects: "30,45 9,10,11 * * 6",
        test: () => index_1.default.everySaturdayAt([9, 10, 11], [30, 45])
    },
    {
        title: "onSpecificDays(['monday', 'wednesday', 'friday'])",
        expects: "0 0 * * 1,3,5",
        test: () => index_1.default.onSpecificDays(["monday", "wednesday", "friday"])
    },
    {
        title: "everyWeek()",
        expects: "0 0 * * 0",
        test: () => index_1.default.everyWeek()
    },
    {
        title: "everyWeekAt(['monday', 'wednesday'], 9, 30)",
        expects: "30 9 * * 1,3",
        test: () => index_1.default.everyWeekAt(["monday", "wednesday"], 9, 30)
    },
    {
        title: "everyWeekDay",
        expects: "0 0 * * 1-5",
        test: () => index_1.default.everyWeekDay()
    },
    {
        title: "everyWeekDayAt(9, 30)",
        expects: "30 9 * * 1-5",
        test: () => index_1.default.everyWeekDayAt(9, 30)
    },
    {
        title: "everyWeekend",
        expects: "0 0 * * 6,0",
        test: () => index_1.default.everyWeekend()
    },
    {
        title: "everyWeekendAt(10, 15)",
        expects: "15 10 * * 6,0",
        test: () => index_1.default.everyWeekendAt(10, 15)
    },
    {
        title: "everyMonth",
        expects: "0 0 1 * *",
        test: () => index_1.default.everyMonth()
    },
    {
        title: "everyMonthOn(15, 9, 30)",
        expects: "30 9 15 * *",
        test: () => index_1.default.everyMonthOn(15, 9, 30)
    },
    {
        title: "everyYear",
        expects: "0 0 1 1 *",
        test: () => index_1.default.everyYear()
    },
    {
        title: "everyYearIn(6, 15, 9, 30)",
        expects: "30 9 15 6 *",
        test: () => index_1.default.everyYearIn(6, 15, 9, 30)
    },
    {
        title: "between(1, 4).days()",
        expects: "0 0 10-20 * *",
        test: () => index_1.default.between(10, 20).days()
    }
];
// add expectsType to MethodsTests
for (const test of MethodsTests)
    test.expectsType = "cron";
/**
 * Test Runner
 * @param tests
 */
function runTests(tests) {
    for (const cron of tests) {
        const title = `${cron.title} => [${cron.expects}]`;
        const expectsCron = cron.expectsType === "cron";
        test(title, (assert) => {
            // check if expects is a valid cron
            if (expectsCron && !(0, cron_validator_1.isValidCron)(cron.expects))
                throw new Error(`Invalid expects cron: ${cron.expects}`);
            const value = cron.test();
            // if string, check if valid cron
            if (expectsCron)
                assert.isTrue((0, cron_validator_1.isValidCron)(value));
            assert.deepEqual(value, cron.expects);
        });
    }
}
/**
 * Run Tests
 */
runTests([].concat(HelpersTests, MethodsTests));
